from __future__ import annotations

import asyncio
import threading
import time
from abc import ABC, abstractmethod
from collections import namedtuple
from telebot.async_telebot import AsyncTeleBot
from telebot.types import (CallbackQuery, InlineKeyboardButton,
                           InlineKeyboardMarkup, KeyboardButton, Message,
                           ReplyKeyboardMarkup)
from .events import (NewUserFormEvent, ReinitializeHandlersEvent,
                     SaveUserFormEvent, UpdateUserFormEvent, UserNotifyEvent)

from mvc import BaseController, Event, EventBus

ViewElements = namedtuple("ViewElements", "handler view_data")
UserData = namedtuple("UserData", "chat_id field value")
HandlerData = namedtuple("HandlerData", "current_handler current_view_data chat_id")



def create_markup(*args):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    for arg in args:
        markup.add(KeyboardButton(arg))

    return markup


class Handler(ABC):
    @abstractmethod
    def set_next(self, handler: Handler) -> Handler:
        pass

    @abstractmethod
    async def handle(self, chat_id: int):
        pass


class AbstractHandler(Handler):
    _next_handler: Handler = None

    def __init__(self, event_bus: EventBus, bot: AsyncTeleBot, *args, **kwargs):
        self._event_bus = event_bus
        self._bot = bot

    def set_next(self, handler: Handler) -> Handler:
        self._next_handler = handler
        return handler

    @abstractmethod
    async def handle(self, chat_id: int):
        pass

    def __call__(self, *args, **kwargs):
        return self


class AbstractInfoHandler(AbstractHandler, ABC):
    pass


class AbstractRequestHandler(AbstractHandler, ABC):
    def __init__(self, event_bus: EventBus, *args, **kwargs):
        super().__init__(event_bus, *args, **kwargs)
        self._commit = asyncio.Event()
        self._data = None

    @abstractmethod
    async def process_response(self, data: str):
        # –º–µ—Ç–æ–¥ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
        self._data = data
        self._commit.set()

class AbstractRequestTextHandler(AbstractRequestHandler, ABC):
    pass


class AbstractRequestButtonHandler(AbstractRequestHandler, ABC):
    pass


class PersonalDataAgreeMessageHandler(AbstractRequestButtonHandler):
    async def handle(self, chat_id: int):
        markup = InlineKeyboardMarkup()
        markup.row_width = 1
        markup.add(
            InlineKeyboardButton("–°–æ–≥–ª–∞—Å–µ–Ω üü¢", callback_data="—Å–æ–≥–ª–∞—Å–µ–Ω"),
        )

        await self._bot.send_message(chat_id, """
        –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –≤–Ω—É—Ç—Ä–∏—É—Ç—Ä–æ–±–Ω–æ–π –≥–∏–±–µ–ª–∏ –ø–ª–æ–¥–∞. –ú—ã –ø–æ–Ω–∏–º–∞–µ–º, —á—Ç–æ —ç—Ç–æ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è —Ç–µ–º–∞, –∏ –º—ã –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É.

–ù–∞—à –±–æ—Ç –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–∞—Ö –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è—Ö. –ú—ã —Å—Ç—Ä–µ–º–∏–º—Å—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º —Ç–æ—á–Ω—ã–µ –∏ –Ω–∞–¥–µ–∂–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–º–æ—á—å –≤–∞–º –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≤–∞—à–µ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è –∏ –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏.

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–º–Ω–∏—Ç–µ, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –±–æ—Ç–æ–º, –Ω–µ –∑–∞–º–µ–Ω—è—é—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≤—Ä–∞—á–æ–º. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–∞, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ–±—Å—É–¥–∏—Ç—å –∏—Ö —Å –≤–∞—à–∏–º –≤—Ä–∞—á–æ–º.

*–î–ª—è –Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤, –≤—ã –¥–æ–ª–∂–Ω—ã —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–°–æ–≥–ª–∞—Å–µ–Ω".* """, parse_mode='Markdown', reply_markup=markup)

        await self._commit.wait()

        self._event_bus.publish(NewUserFormEvent(chat_id))

        return self._next_handler

    async def process_response(self, data: str):
        self._data = data
        self._commit.set()

class StartMessageHandler(AbstractRequestButtonHandler):
    async def handle(self, chat_id: int):
        markup = InlineKeyboardMarkup()
        markup.row_width = 1
        markup.add(
            InlineKeyboardButton("–ù–∞—á–∞—Ç—å üöÄ", callback_data="–Ω–∞—á–∞—Ç—å"),
        )

        await self._bot.send_message(chat_id, """
–í—ã —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!

*–î–ª—è –Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å".* """, parse_mode='Markdown', reply_markup=markup)

        await self._commit.wait()

        self._event_bus.publish(NewUserFormEvent(chat_id))

        return self._next_handler

    async def process_response(self, data: str):
        self._data = data
        self._commit.set()

class FetalRiskFactorsHandler(AbstractInfoHandler):
    async def handle(self, chat_id: int):
        await self._bot.send_message(chat_id, "*üîé –ë–ª–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤: –ø–ª–æ–¥–æ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞.*", parse_mode='Markdown')

        return self._next_handler


class CongenitalMalformationsHandler(AbstractRequestButtonHandler):
    async def handle(self, chat_id: int):
        markup = InlineKeyboardMarkup()
        markup.row_width = 2
        markup.add(
            InlineKeyboardButton("–î–∞", callback_data="–¥–∞"),
            InlineKeyboardButton("–ù–µ—Ç", callback_data="–Ω–µ—Ç"),
        )

        sent_message = await self._bot.send_message(
            chat_id,
            "–ù–∞–±–ª—é–¥–∞–ª–∏—Å—å –ª–∏ –≤—Ä–æ–∂–¥–µ–Ω–Ω—ã–µ –ø–æ—Ä–æ–∫–∏ —Ä–∞–∑–≤–∏—Ç–∏—è?",
            reply_markup=markup,
        )

        await self._commit.wait()

        await self._bot.edit_message_text(
            text=f"–ù–∞ –≤–æ–ø—Ä–æ—Å –æ –≤—Ä–æ–∂–¥–µ–Ω—ã—Ö –ø–æ—Ä–æ–∫–∞—Ö —Ä–∞–∑–≤–∏—Ç–∏—è –≤—ã –æ—Ç–≤–µ—Ç–∏–ª–∏: {self._data}",
            chat_id=chat_id,
            message_id=sent_message.message_id,
        )

        self._event_bus.publish(
            UpdateUserFormEvent(
                UserData(
                    chat_id=chat_id,
                    field="is_congenital_mal_formations",
                    value=True if self._data == "–¥–∞" else False,
                )
            )
        )

        return self._next_handler

    async def process_response(self, data: str):
        self._data = data
        self._commit.set()


class AcuteInfectionsHandler(AbstractRequestButtonHandler):
    async def handle(self, chat_id: int):
        markup = InlineKeyboardMarkup()
        markup.row_width = 2
        markup.add(
            InlineKeyboardButton("–î–∞", callback_data="–¥–∞"),
            InlineKeyboardButton("–ù–µ—Ç", callback_data="–Ω–µ—Ç"),
        )

        sent_message = await self._bot.send_message(
            chat_id,
            "–ù–∞–±–ª—é–¥–∞–ª–∏—Å—å –ª–∏ –∏–Ω—Ñ–µ–∫—Ü–∏–∏ –æ—Å—Ç—Ä—ã–µ?",
            reply_markup=markup,
        )

        await self._commit.wait()

        await self._bot.edit_message_text(
            text=f"–ù–∞ –≤–æ–ø—Ä–æ—Å –æ–± –æ—Å—Ç—Ä—ã—Ö –∏–Ω—Ñ–µ–∫—Ü–∏—è—Ö –≤—ã –æ—Ç–≤–µ—Ç–∏–ª–∏: {self._data}",
            chat_id=chat_id,
            message_id=sent_message.message_id,
        )

        self._event_bus.publish(
            UpdateUserFormEvent(
                UserData(
                    chat_id=chat_id,
                    field="is_acute_infections",
                    value=True if self._data == "–¥–∞" else False,
                )
            )
        )

        return self._next_handler

    async def process_response(self, data: str):
        self._data = data
        self._commit.set()


class NonimmuneHydropsHandler(AbstractRequestButtonHandler):
    async def handle(self, chat_id: int):
        markup = InlineKeyboardMarkup()
        markup.row_width = 2
        markup.add(
            InlineKeyboardButton("–î–∞", callback_data="–¥–∞"),
            InlineKeyboardButton("–ù–µ—Ç", callback_data="–Ω–µ—Ç"),
        )

        sent_message = await self._bot.send_message(
            chat_id,
            "–ù–∞–±–ª—é–±–¥–∞–ª–∞—Å—å –ª–∏ –Ω–µ–∏–º–º—É–Ω–Ω–∞—è –≤–æ–¥—è–Ω–∫–∞?",
            reply_markup=markup,
        )

        await self._commit.wait()

        await self._bot.edit_message_text(
            text=f"–ù–∞ –≤–æ–ø—Ä–æ—Å –æ –Ω–µ–∏–º—É–Ω–Ω–æ–π –≤–æ–¥—è–Ω–∫–µ –≤—ã –æ—Ç–≤–µ—Ç–∏–ª–∏: {self._data}",
            chat_id=chat_id,
            message_id=sent_message.message_id,
        )

        self._event_bus.publish(
            UpdateUserFormEvent(
                UserData(
                    chat_id=chat_id,
                    field="is_nonimmune_hydrops",
                    value=True if self._data == "–¥–∞" else False,
                )
            )
        )

        return self._next_handler

    async def process_response(self, data: str):
        self._data = data
        self._commit.set()


class IsoimmunizationHandler(AbstractRequestButtonHandler):
    async def handle(self, chat_id: int):
        markup = InlineKeyboardMarkup()
        markup.row_width = 2
        markup.add(
            InlineKeyboardButton("–î–∞", callback_data="–¥–∞"),
            InlineKeyboardButton("–ù–µ—Ç", callback_data="–Ω–µ—Ç"),
        )

        sent_message = await self._bot.send_message(
            chat_id,
            "–ù–∞–±–ª—é–¥–∞–ª–∞—Å—å –ª–∏ –∏–∑–æ–∏–º–º—É–Ω–∏–∑–∞—Ü–∏—è?",
            reply_markup=markup,
        )

        await self._commit.wait()

        await self._bot.edit_message_text(
            text=f"–ù–∞ –≤–æ–ø—Ä–æ—Å –æ–± –∏–∑–æ–º—É–Ω–∏–∑–∞—Ü–∏–∏ –≤—ã –æ—Ç–≤–µ—Ç–∏–ª–∏: {self._data}",
            chat_id=chat_id,
            message_id=sent_message.message_id,
        )

        self._event_bus.publish(
            UpdateUserFormEvent(
                UserData(
                    chat_id=chat_id,
                    field="is_isoimmunization",
                    value=True if self._data == "–¥–∞" else False,
                )
            )
        )

        return self._next_handler

    async def process_response(self, data: str):
        self._data = data
        self._commit.set()


class MaternalFetalHemorrhageHandler(AbstractRequestButtonHandler):
    async def handle(self, chat_id: int):
        markup = InlineKeyboardMarkup()
        markup.row_width = 2
        markup.add(
            InlineKeyboardButton("–î–∞", callback_data="–¥–∞"),
            InlineKeyboardButton("–ù–µ—Ç", callback_data="–Ω–µ—Ç"),
        )

        sent_message = await self._bot.send_message(
            chat_id,
            "–ù–∞–±–ª—é–¥–∞–ª–∞—Å—å –ª–∏ –ø–ª–æ–¥–æ–≤–æ-–º–∞—Ç–µ—Ä–∏–Ω—Å–∫–æ–µ –∫—Ä–æ–≤–æ—Ç–µ—á–µ–Ω–∏–µ?",
            reply_markup=markup,
        )

        await self._commit.wait()

        await self._bot.edit_message_text(
            text=f"–ù–∞ –≤–æ–ø—Ä–æ—Å –æ –ø–ª–æ–¥–æ–≤–æ-–º–∞—Ç–µ—Ä–∏–Ω—Å–∫–æ–µ –∫—Ä–æ–≤–æ—Ç–µ—á–µ–Ω–∏–∏ –≤—ã –æ—Ç–≤–µ—Ç–∏–ª–∏: {self._data}",
            chat_id=chat_id,
            message_id=sent_message.message_id,
        )

        self._event_bus.publish(
            UpdateUserFormEvent(
                UserData(
                    chat_id=chat_id,
                    field="is_maternal_fetal_hemorrhage",
                    value=True if self._data == "–¥–∞" else False,
                )
            )
        )

        return self._next_handler

    async def process_response(self, data: str):
        self._data = data
        self._commit.set()


class FetoFetalTransfusionSyndromeHandler(AbstractRequestButtonHandler):
    async def handle(self, chat_id: int):
        markup = InlineKeyboardMarkup()
        markup.row_width = 2
        markup.add(
            InlineKeyboardButton("–î–∞", callback_data="–¥–∞"),
            InlineKeyboardButton("–ù–µ—Ç", callback_data="–Ω–µ—Ç"),
        )

        sent_message = await self._bot.send_message(
            chat_id,
            "–ù–∞–±–ª—é–¥–∞–ª—Å—è –ª–∏ —Ñ–µ—Ç–æ-—Ñ–µ—Ç–∞–ª—å–Ω—ã–π —Ç—Ä–∞–Ω—Å—Ñ—É–∑–∏–æ–Ω–Ω—ã–π —Å–∏–Ω–¥—Ä–æ–º?",
            reply_markup=markup,
        )

        await self._commit.wait()

        await self._bot.edit_message_text(
            text=f"–ù–∞ –≤–æ–ø—Ä–æ—Å –æ —Ñ–µ—Ç–æ-—Ñ–µ—Ç–∞–ª—å–Ω—ã–π —Ç—Ä–∞–Ω—Å—Ñ—É–∑–∏–æ–Ω–Ω—ã–π —Å–∏–Ω–¥—Ä–æ–º–µ –≤—ã –æ—Ç–≤–µ—Ç–∏–ª–∏: {self._data}",
            chat_id=chat_id,
            message_id=sent_message.message_id,
        )

        self._event_bus.publish(
            UpdateUserFormEvent(
                UserData(
                    chat_id=chat_id,
                    field="is_feto_fetal_transfusion_syndrome",
                    value=True if self._data == "–¥–∞" else False,
                )
            )
        )

        return self._next_handler

    async def process_response(self, data: str):
        self._data = data
        self._commit.set()


class FetalGrowthRestrictionHandler(AbstractRequestButtonHandler):
    async def handle(self, chat_id: int):
        markup = InlineKeyboardMarkup()
        markup.row_width = 2
        markup.add(
            InlineKeyboardButton("–î–∞", callback_data="–¥–∞"),
            InlineKeyboardButton("–ù–µ—Ç", callback_data="–Ω–µ—Ç"),
        )

        sent_message = await self._bot.send_message(
            chat_id,
            "–ù–∞–±–ª—é–¥–∞–ª–∞—Å—å –ª–∏ –∑–∞–¥–µ—Ä–∂–∫–∞ —Ä–æ—Å—Ç–∞ –ø–ª–æ–¥–∞?",
            reply_markup=markup,
        )

        await self._commit.wait()

        await self._bot.edit_message_text(
            text=f"–ù–∞ –≤–æ–ø—Ä–æ—Å –æ –∑–∞–¥–µ—Ä–∂–∫–µ —Ä–æ—Å—Ç–∞ –ø–ª–æ–¥–∞ –≤—ã –æ—Ç–≤–µ—Ç–∏–ª–∏: {self._data}",
            chat_id=chat_id,
            message_id=sent_message.message_id,
        )

        self._event_bus.publish(
            UpdateUserFormEvent(
                UserData(
                    chat_id=chat_id,
                    field="is_fetal_growth_restriction",
                    value=True if self._data == "–¥–∞" else False,
                )
            )
        )

        return self._next_handler

    async def process_response(self, data: str):
        self._data = data
        self._commit.set()

class UmbilicalCordRiskFactorsHandler(AbstractInfoHandler):
    async def handle(self, chat_id: int):
        await self._bot.send_message(chat_id, "* üîé –ë–ª–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤: –ø—É–ø–æ–≤–∏–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞.*", parse_mode='Markdown')

        return self._next_handler


class ProlapseHandler(AbstractRequestButtonHandler):
    async def handle(self, chat_id: int):
        markup = InlineKeyboardMarkup()
        markup.row_width = 2
        markup.add(
            InlineKeyboardButton("–î–∞", callback_data="–¥–∞"),
            InlineKeyboardButton("–ù–µ—Ç", callback_data="–Ω–µ—Ç"),
        )

        sent_message = await self._bot.send_message(
            chat_id,
            "–ù–∞–±–ª—é–¥–∞–ª–æ—Å—å –ª–∏ –≤—ã–ø–∞–¥–µ–Ω–∏–µ –ø—É–ø–æ–≤–∏–Ω—ã?",
            reply_markup=markup,
        )

        await self._commit.wait()

        await self._bot.edit_message_text(
            text=f"–ù–∞ –≤–æ–ø—Ä–æ—Å –æ –≤—ã–ø–∞–¥–µ–Ω–∏–∏ –ø—É–ø–æ–≤–∏–Ω—ã –≤—ã –æ—Ç–≤–µ—Ç–∏–ª–∏: {self._data}",
            chat_id=chat_id,
            message_id=sent_message.message_id,
        )

        self._event_bus.publish(
            UpdateUserFormEvent(
                UserData(
                    chat_id=chat_id,
                    field="is_prolapse",
                    value=True if self._data == "–¥–∞" else False,
                )
            )
        )

        return self._next_handler

    async def process_response(self, data: str):
        self._data = data
        self._commit.set()

class UmbilicalCoilingKnotHandler(AbstractRequestButtonHandler):
    async def handle(self, chat_id: int):
        markup = InlineKeyboardMarkup()
        markup.row_width = 2
        markup.add(
            InlineKeyboardButton("–î–∞", callback_data="–¥–∞"),
            InlineKeyboardButton("–ù–µ—Ç", callback_data="–Ω–µ—Ç"),
        )

        sent_message = await self._bot.send_message(
            chat_id,
            "–ù–∞–±–ª—é–¥–∞–ª–æ—Å—å –ª–∏ –æ–±–≤–∏—Ç–∏–µ/—É–∑–µ–ª –ø—É–ø–æ–≤–∏–Ω—ã?",
            reply_markup=markup,
        )

        await self._commit.wait()

        await self._bot.edit_message_text(
            text=f"–ù–∞ –≤–æ–ø—Ä–æ—Å –æ –æ–±–≤–∏—Ç–∏–∏/—É–∑–ª–∞ –ø—É–ø–æ–≤–∏–Ω—ã –≤—ã –æ—Ç–≤–µ—Ç–∏–ª–∏: {self._data}",
            chat_id=chat_id,
            message_id=sent_message.message_id,
        )

        self._event_bus.publish(
            UpdateUserFormEvent(
                UserData(
                    chat_id=chat_id,
                    field="is_umbilical_coiling_knot",
                    value=True if self._data == "–¥–∞" else False,
                )
            )
        )

        return self._next_handler

    async def process_response(self, data: str):
        self._data = data
        self._commit.set()

class VelamentousInsertionHandler(AbstractRequestButtonHandler):
    async def handle(self, chat_id: int):
        markup = InlineKeyboardMarkup()
        markup.row_width = 2
        markup.add(
            InlineKeyboardButton("–î–∞", callback_data="–¥–∞"),
            InlineKeyboardButton("–ù–µ—Ç", callback_data="–Ω–µ—Ç"),
        )

        sent_message = await self._bot.send_message(
            chat_id,
            "–ù–∞–±–ª—é–¥–∞–ª–æ—Å—å –ª–∏ –æ–±–æ–ª–æ—á–µ—á–Ω–æ–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –ø—É–ø–æ–≤–∏–Ω—ã?",
            reply_markup=markup,
        )

        await self._commit.wait()

        await self._bot.edit_message_text(
            text=f"–ù–∞ –≤–æ–ø—Ä–æ—Å –æ –æ–±–æ–ª–æ—á–µ—á–Ω–æ–º –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ –ø—É–ø–æ–≤–∏–Ω—ã –≤—ã –æ—Ç–≤–µ—Ç–∏–ª–∏: {self._data}",
            chat_id=chat_id,
            message_id=sent_message.message_id,
        )

        self._event_bus.publish(
            UpdateUserFormEvent(
                UserData(
                    chat_id=chat_id,
                    field="is_velamentous_insertion",
                    value=True if self._data == "–¥–∞" else False,
                )
            )
        )

        return self._next_handler

    async def process_response(self, data: str):
        self._data = data
        self._commit.set()


class ShortUmbilicalCordHandler(AbstractRequestButtonHandler):
    async def handle(self, chat_id: int):
        markup = InlineKeyboardMarkup()
        markup.row_width = 2
        markup.add(
            InlineKeyboardButton("–î–∞", callback_data="–¥–∞"),
            InlineKeyboardButton("–ù–µ—Ç", callback_data="–Ω–µ—Ç"),
        )

        sent_message = await self._bot.send_message(
            chat_id,
            "–ù–∞–±–ª—é–¥–∞–µ—Ç—Å—è –ª–∏ –∫–æ—Ä–æ—Ç–∫–∞—è –ø—É–ø–æ–≤–∏–Ω–∞?",
            reply_markup=markup,
        )

        await self._commit.wait()

        await self._bot.edit_message_text(
            text=f"–ù–∞ –≤–æ–ø—Ä–æ—Å –æ –∫–æ—Ä–æ—Ç–∫–æ–π –ø—É–ø–æ–≤–∏–Ω–µ –≤—ã –æ—Ç–≤–µ—Ç–∏–ª–∏: {self._data}",
            chat_id=chat_id,
            message_id=sent_message.message_id,
        )

        self._event_bus.publish(
            UpdateUserFormEvent(
                UserData(
                    chat_id=chat_id,
                    field="is_short_umbilical_cord",
                    value=True if self._data == "–¥–∞" else False,
                )
            )
        )

        return self._next_handler

    async def process_response(self, data: str):
        self._data = data
        self._commit.set()


class PlacentalRiskFactorsHandler(AbstractInfoHandler):
    async def handle(self, chat_id: int):
        await self._bot.send_message(chat_id, "* üîé –ë–ª–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤: –ø–ª–∞—Ü–µ–Ω—Ç–∞—Ä–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞.*", parse_mode='Markdown')

        return self._next_handler



class PlacentalAbruptionHandler(AbstractRequestButtonHandler):
    async def handle(self, chat_id: int):
        markup = InlineKeyboardMarkup()
        markup.row_width = 2
        markup.add(
            InlineKeyboardButton("–î–∞", callback_data="–¥–∞"),
            InlineKeyboardButton("–ù–µ—Ç", callback_data="–Ω–µ—Ç"),
        )

        sent_message = await self._bot.send_message(
            chat_id,
            "–ù–∞–±–ª—é–¥–∞–ª–∞—Å—å –ª–∏ –æ—Ç—Å–ª–æ–π–∫–∞ –ø–ª–∞—Ü–µ–Ω—Ç—ã?",
            reply_markup=markup,
        )

        await self._commit.wait()

        await self._bot.edit_message_text(
            text=f"–ù–∞ –≤–æ–ø—Ä–æ—Å –æ–± –æ—Ç—Å–ª–æ–π–∫–µ –ø–ª–∞—Ü–µ–Ω—Ç—ã –≤—ã –æ—Ç–≤–µ—Ç–∏–ª–∏: {self._data}",
            chat_id=chat_id,
            message_id=sent_message.message_id,
        )

        self._event_bus.publish(
            UpdateUserFormEvent(
                UserData(
                    chat_id=chat_id,
                    field="is_placental_abruption",
                    value=True if self._data == "–¥–∞" else False,
                )
            )
        )

        return self._next_handler

    async def process_response(self, data: str):
        self._data = data
        self._commit.set()


class PlacentalPreviaHandler(AbstractRequestButtonHandler):
    async def handle(self, chat_id: int):
        markup = InlineKeyboardMarkup()
        markup.row_width = 2
        markup.add(
            InlineKeyboardButton("–î–∞", callback_data="–¥–∞"),
            InlineKeyboardButton("–ù–µ—Ç", callback_data="–Ω–µ—Ç"),
        )

        sent_message = await self._bot.send_message(
            chat_id,
            "–ù–∞–±–ª—é–¥–∞–ª–∞—Å—å –ª–∏ –ø—Ä–µ–¥–ª–µ–∂–∞–Ω–∏–µ –ø–ª–∞—Ü–µ–Ω—Ç—ã?",
            reply_markup=markup,
        )

        await self._commit.wait()

        await self._bot.edit_message_text(
            text=f"–ù–∞ –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–µ–¥–ª–µ–∂–∞–Ω–∏–∏ –ø–ª–∞—Ü–µ–Ω—Ç—ã –≤—ã –æ—Ç–≤–µ—Ç–∏–ª–∏: {self._data}",
            chat_id=chat_id,
            message_id=sent_message.message_id,
        )

        self._event_bus.publish(
            UpdateUserFormEvent(
                UserData(
                    chat_id=chat_id,
                    field="is_placental_previa",
                    value=True if self._data == "–¥–∞" else False,
                )
            )
        )

        return self._next_handler

    async def process_response(self, data: str):
        self._data = data
        self._commit.set()

class VascularCordProlapseHandler(AbstractRequestButtonHandler):
    async def handle(self, chat_id: int):
        markup = InlineKeyboardMarkup()
        markup.row_width = 2
        markup.add(
            InlineKeyboardButton("–î–∞", callback_data="–¥–∞"),
            InlineKeyboardButton("–ù–µ—Ç", callback_data="–Ω–µ—Ç"),
        )

        sent_message = await self._bot.send_message(
            chat_id,
            "–ù–∞–±–ª—é–¥–∞–ª–∞—Å—å –ª–∏ –ø—Ä–µ–¥–ª–µ–∂–∞–Ω–∏–µ —Å–æ—Å—É–¥–æ–≤ –ø—É–ø–æ–≤–∏–Ω—ã?",
            reply_markup=markup,
        )

        await self._commit.wait()

        await self._bot.edit_message_text(
            text=f"–ù–∞ –≤–æ–ø—Ä–æ—Å –æ–±  –ø—Ä–µ–¥–ª–µ–∂–∞–Ω–∏–∏ —Å–æ—Å—É–¥–æ–≤ –ø—É–ø–æ–≤–∏–Ω—ã –≤—ã –æ—Ç–≤–µ—Ç–∏–ª–∏: {self._data}",
            chat_id=chat_id,
            message_id=sent_message.message_id,
        )

        self._event_bus.publish(
            UpdateUserFormEvent(
                UserData(
                    chat_id=chat_id,
                    field="is_vascular_cord_prolapse",
                    value=True if self._data == "–¥–∞" else False,
                )
            )
        )

        return self._next_handler

    async def process_response(self, data: str):
        self._data = data
        self._commit.set()

class PlacentalInsufficiencyHandler(AbstractRequestButtonHandler):
    async def handle(self, chat_id: int):
        markup = InlineKeyboardMarkup()
        markup.row_width = 2
        markup.add(
            InlineKeyboardButton("–î–∞", callback_data="–¥–∞"),
            InlineKeyboardButton("–ù–µ—Ç", callback_data="–Ω–µ—Ç"),
        )

        sent_message = await self._bot.send_message(
            chat_id,
            "–ù–∞–±–ª—é–¥–∞–ª–∞—Å—å –ª–∏ –ø–ª–∞—Ü–µ–Ω—Ç–∞—Ä–Ω–∞—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å?",
            reply_markup=markup,
        )

        await self._commit.wait()

        await self._bot.edit_message_text(
            text=f"–ù–∞ –≤–æ–ø—Ä–æ—Å –æ –ø–ª–∞—Ü–µ–Ω—Ç–∞—Ä–Ω–æ–π –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ –≤—ã –æ—Ç–≤–µ—Ç–∏–ª–∏: {self._data}",
            chat_id=chat_id,
            message_id=sent_message.message_id,
        )

        self._event_bus.publish(
            UpdateUserFormEvent(
                UserData(
                    chat_id=chat_id,
                    field="is_placental_insufficiency",
                    value=True if self._data == "–¥–∞" else False,
                )
            )
        )

        return self._next_handler

    async def process_response(self, data: str):
        self._data = data
        self._commit.set()


class FactorsAmnioticFluidPathologyHandler(AbstractInfoHandler):
    async def handle(self, chat_id: int):
        await self._bot.send_message(chat_id, "* üîé –ë–ª–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤: —Ñ–∞–∫—Ç–æ—Ä—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–∞—Ç–æ–ª–æ–≥–∏–µ–π –∞–º–Ω–∏–æ—Ç–∏—á–µ—Å–∫–æ–π –∂–∏–¥–∫–æ—Å—Ç–∏ *", parse_mode='Markdown')

        return self._next_handler



class ChorioamnionitisHandler(AbstractRequestButtonHandler):
    async def handle(self, chat_id: int):
        markup = InlineKeyboardMarkup()
        markup.row_width = 2
        markup.add(
            InlineKeyboardButton("–î–∞", callback_data="–¥–∞"),
            InlineKeyboardButton("–ù–µ—Ç", callback_data="–Ω–µ—Ç"),
        )

        sent_message = await self._bot.send_message(
            chat_id,
            "–ù–∞–±–ª—é–¥–∞–ª—Å—è –ª–∏ —Ö–æ—Ä–∏–æ–∞–º–Ω–∏–æ–Ω–∏—Ç?",
            reply_markup=markup,
        )

        await self._commit.wait()

        await self._bot.edit_message_text(
            text=f"–ù–∞ –≤–æ–ø—Ä–æ—Å –æ —Ö–æ—Ä–∏–æ–∞–º–Ω–∏–æ–Ω–∏—Ç–µ –≤—ã –æ—Ç–≤–µ—Ç–∏–ª–∏: {self._data}",
            chat_id=chat_id,
            message_id=sent_message.message_id,
        )

        self._event_bus.publish(
            UpdateUserFormEvent(
                UserData(
                    chat_id=chat_id,
                    field="is_chorioamnionitis",
                    value=True if self._data == "–¥–∞" else False,
                )
            )
        )

        return self._next_handler

    async def process_response(self, data: str):
        self._data = data
        self._commit.set()

class OligohydramniosHandler(AbstractRequestButtonHandler):
    async def handle(self, chat_id: int):
        markup = InlineKeyboardMarkup()
        markup.row_width = 2
        markup.add(
            InlineKeyboardButton("–î–∞", callback_data="–¥–∞"),
            InlineKeyboardButton("–ù–µ—Ç", callback_data="–Ω–µ—Ç"),
        )

        sent_message = await self._bot.send_message(
            chat_id,
            "–ù–∞–±–ª—é–¥–∞–ª—Å—è –ª–∏ –æ–ª–∏–≥–æ–∞–º–Ω–∏–æ–Ω (–º–∞–ª–æ–≤–æ–¥–∏–µ)?",
            reply_markup=markup,
        )

        await self._commit.wait()

        await self._bot.edit_message_text(
            text=f"–ù–∞ –≤–æ–ø—Ä–æ—Å –æ –æ–ª–∏–≥–æ–∞–º–Ω–∏–æ–Ω–µ (–º–∞–ª–æ–≤–æ–¥–∏–∏) –≤—ã –æ—Ç–≤–µ—Ç–∏–ª–∏: {self._data}",
            chat_id=chat_id,
            message_id=sent_message.message_id,
        )

        self._event_bus.publish(
            UpdateUserFormEvent(
                UserData(
                    chat_id=chat_id,
                    field="is_oligohydramnios",
                    value=True if self._data == "–¥–∞" else False,
                )
            )
        )

        return self._next_handler

    async def process_response(self, data: str):
        self._data = data
        self._commit.set()

class PolyhydramniosHandler(AbstractRequestButtonHandler):
    async def handle(self, chat_id: int):
        markup = InlineKeyboardMarkup()
        markup.row_width = 2
        markup.add(
            InlineKeyboardButton("–î–∞", callback_data="–¥–∞"),
            InlineKeyboardButton("–ù–µ—Ç", callback_data="–Ω–µ—Ç"),
        )

        sent_message = await self._bot.send_message(
            chat_id,
            "–ù–∞–±–ª—é–¥–∞–ª—Å—è –ª–∏ –ø–æ–ª–∏–≥–∏–¥—Ä–∞–º–Ω–∏–æ–Ω (–º–Ω–æ–≥–æ–≤–æ–¥–∏–µ)?",
            reply_markup=markup,
        )

        await self._commit.wait()

        await self._bot.edit_message_text(
            text=f"–ù–∞ –≤–æ–ø—Ä–æ—Å –æ –ø–æ–ª–∏–≥–∏–¥—Ä–∞–º–Ω–∏–æ–Ω–µ (–º–Ω–æ–≥–æ–≤–æ–¥–∏–∏) –≤—ã –æ—Ç–≤–µ—Ç–∏–ª–∏: {self._data}",
            chat_id=chat_id,
            message_id=sent_message.message_id,
        )

        self._event_bus.publish(
            UpdateUserFormEvent(
                UserData(
                    chat_id=chat_id,
                    field="is_polyhydramnios",
                    value=True if self._data == "–¥–∞" else False,
                )
            )
        )

        return self._next_handler

    async def process_response(self, data: str):
        self._data = data
        self._commit.set()


class MaternalRiskFactorsHandler(AbstractInfoHandler):
    async def handle(self, chat_id: int):
        await self._bot.send_message(chat_id, "* üîé –ë–ª–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤: –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞ *", parse_mode='Markdown')

        return self._next_handler


class AsphyxiaHandler(AbstractRequestButtonHandler):
    async def handle(self, chat_id: int):
        markup = InlineKeyboardMarkup()
        markup.row_width = 2
        markup.add(
            InlineKeyboardButton("–î–∞", callback_data="–¥–∞"),
            InlineKeyboardButton("–ù–µ—Ç", callback_data="–Ω–µ—Ç"),
        )

        sent_message = await self._bot.send_message(
            chat_id,
            "–ù–∞–±–ª—é–¥–∞–ª–∞—Å—å –ª–∏ –∏–Ω—Ç—Ä–∞–Ω–∞—Ç–∞–ª—å–Ω–∞—è (–≤–æ –≤—Ä–µ–º—è —Ä–æ–¥–æ–≤) –∞—Å—Ñ–∏–∫—Å–∏—è?",
            reply_markup=markup,
        )

        await self._commit.wait()

        await self._bot.edit_message_text(
            text=f"–ù–∞ –≤–æ–ø—Ä–æ—Å –æ –∏–Ω—Ç—Ä–∞–Ω–∞—Ç–∞–ª—å–Ω–æ–π –∞—Å—Ñ–∏–∫—Å–∏–∏ –≤—ã –æ—Ç–≤–µ—Ç–∏–ª–∏: {self._data}",
            chat_id=chat_id,
            message_id=sent_message.message_id,
        )

        self._event_bus.publish(
            UpdateUserFormEvent(
                UserData(
                    chat_id=chat_id,
                    field="is_asphyxia",
                    value=True if self._data == "–¥–∞" else False,
                )
            )
        )

        return self._next_handler

    async def process_response(self, data: str):
        self._data = data
        self._commit.set()


class BirthTraumaHandler(AbstractRequestButtonHandler):
    async def handle(self, chat_id: int):
        markup = InlineKeyboardMarkup()
        markup.row_width = 2
        markup.add(
            InlineKeyboardButton("–î–∞", callback_data="–¥–∞"),
            InlineKeyboardButton("–ù–µ—Ç", callback_data="–Ω–µ—Ç"),
        )

        sent_message = await self._bot.send_message(
            chat_id,
            "–ù–∞–±–ª—é–¥–∞–ª–∞—Å—å –ª–∏ –∏–Ω—Ç—Ä–∞–Ω–∞—Ç–∞–ª—å–Ω–∞—è (–≤–æ –≤—Ä–µ–º—è —Ä–æ–¥–æ–≤) —Ä–æ–¥–æ–≤–∞—è —Ç—Ä–∞–≤–º–∞?",
            reply_markup=markup,
        )

        await self._commit.wait()

        await self._bot.edit_message_text(
            text=f"–ù–∞ –≤–æ–ø—Ä–æ—Å –æ –∏–Ω—Ç—Ä–∞–Ω–∞—Ç–∞–ª—å–Ω–æ–π —Ä–æ–¥–æ–≤–æ–π —Ç—Ä–∞–≤–º–µ –≤—ã –æ—Ç–≤–µ—Ç–∏–ª–∏: {self._data}",
            chat_id=chat_id,
            message_id=sent_message.message_id,
        )

        self._event_bus.publish(
            UpdateUserFormEvent(
                UserData(
                    chat_id=chat_id,
                    field="is_birth_trauma",
                    value=True if self._data == "–¥–∞" else False,
                )
            )
        )

        return self._next_handler

    async def process_response(self, data: str):
        self._data = data
        self._commit.set()


class ExternalInjuryHandler(AbstractRequestButtonHandler):
    async def handle(self, chat_id: int):
        markup = InlineKeyboardMarkup()
        markup.row_width = 2
        markup.add(
            InlineKeyboardButton("–î–∞", callback_data="–¥–∞"),
            InlineKeyboardButton("–ù–µ—Ç", callback_data="–Ω–µ—Ç"),
        )

        sent_message = await self._bot.send_message(
            chat_id,
            "–ù–∞–±–ª—é–¥–∞–ª–∞—Å—å –ª–∏ –≤–Ω–µ—à–Ω—è—è —Ç—Ä–∞–≤–º–∞?",
            reply_markup=markup,
        )

        await self._commit.wait()

        await self._bot.edit_message_text(
            text=f"–ù–∞ –≤–æ–ø—Ä–æ—Å –æ –≤–Ω–µ—à–Ω–µ–π —Ç—Ä–∞–≤–º–µ –≤—ã –æ—Ç–≤–µ—Ç–∏–ª–∏: {self._data}",
            chat_id=chat_id,
            message_id=sent_message.message_id,
        )

        self._event_bus.publish(
            UpdateUserFormEvent(
                UserData(
                    chat_id=chat_id,
                    field="is_external_injury",
                    value=True if self._data == "–¥–∞" else False,
                )
            )
        )

        return self._next_handler

    async def process_response(self, data: str):
        self._data = data
        self._commit.set()


class IatrogenicInjuryHandler(AbstractRequestButtonHandler):
    async def handle(self, chat_id: int):
        markup = InlineKeyboardMarkup()
        markup.row_width = 2
        markup.add(
            InlineKeyboardButton("–î–∞", callback_data="–¥–∞"),
            InlineKeyboardButton("–ù–µ—Ç", callback_data="–Ω–µ—Ç"),
        )

        sent_message = await self._bot.send_message(
            chat_id,
            "–ù–∞–±–ª—é–¥–∞–ª–∞—Å—å –ª–∏ —è—Ç—Ä–æ–≥–µ–Ω–Ω–∞—è —Ç—Ä–∞–≤–º–∞?",
            reply_markup=markup,
        )

        await self._commit.wait()

        await self._bot.edit_message_text(
            text=f"–ù–∞ –≤–æ–ø—Ä–æ—Å –æ —è—Ç—Ä–æ–≥–µ–Ω–Ω–æ–π —Ç—Ä–∞–≤–º–µ –≤—ã –æ—Ç–≤–µ—Ç–∏–ª–∏: {self._data}",
            chat_id=chat_id,
            message_id=sent_message.message_id,
        )

        self._event_bus.publish(
            UpdateUserFormEvent(
                UserData(
                    chat_id=chat_id,
                    field="is_iatrogenic_injury",
                    value=True if self._data == "–¥–∞" else False,
                )
            )
        )

        return self._next_handler

    async def process_response(self, data: str):
        self._data = data
        self._commit.set()


class UterineRuptureHandler(AbstractRequestButtonHandler):
    async def handle(self, chat_id: int):
        markup = InlineKeyboardMarkup()
        markup.row_width = 2
        markup.add(
            InlineKeyboardButton("–î–∞", callback_data="–¥–∞"),
            InlineKeyboardButton("–ù–µ—Ç", callback_data="–Ω–µ—Ç"),
        )

        sent_message = await self._bot.send_message(
            chat_id,
            "–ù–∞–±–ª—é–¥–∞–ª—Å—è –ª–∏ —Ä–∞–∑—Ä—ã–≤ –º–∞—Ç–∫–∏?",
            reply_markup=markup,
        )

        await self._commit.wait()

        await self._bot.edit_message_text(
            text=f"–ù–∞ –≤–æ–ø—Ä–æ—Å –æ —Ä–∞–∑—Ä—ã–≤–µ –º–∞—Ç–∫–∏ –≤—ã –æ—Ç–≤–µ—Ç–∏–ª–∏: {self._data}",
            chat_id=chat_id,
            message_id=sent_message.message_id,
        )

        self._event_bus.publish(
            UpdateUserFormEvent(
                UserData(
                    chat_id=chat_id,
                    field="is_uterine_rupture",
                    value=True if self._data == "–¥–∞" else False,
                )
            )
        )

        return self._next_handler

    async def process_response(self, data: str):
        self._data = data
        self._commit.set()


class UterineMalformationsHandler(AbstractRequestButtonHandler):
    async def handle(self, chat_id: int):
        markup = InlineKeyboardMarkup()
        markup.row_width = 2
        markup.add(
            InlineKeyboardButton("–î–∞", callback_data="–¥–∞"),
            InlineKeyboardButton("–ù–µ—Ç", callback_data="–Ω–µ—Ç"),
        )

        sent_message = await self._bot.send_message(
            chat_id,
            "–ù–∞–±–ª—é–¥–∞–ª–∏—Å—å –ª–∏ –Ω–µ–º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º—ã–µ –ø–æ—Ä–æ–∫–∏ —Ä–∞–∑–≤–∏—Ç–∏—è/—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ç–∫–∏?",
            reply_markup=markup,
        )

        await self._commit.wait()

        await self._bot.edit_message_text(
            text=f"–ù–∞ –≤–æ–ø—Ä–æ—Å –æ –Ω–µ–º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º—ã—Ö –ø–æ—Ä–æ–∫–∞—Ö —Ä–∞–∑–≤–∏—Ç–∏—è/—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ç–∫–∏ –≤—ã –æ—Ç–≤–µ—Ç–∏–ª–∏: {self._data}",
            chat_id=chat_id,
            message_id=sent_message.message_id,
        )

        self._event_bus.publish(
            UpdateUserFormEvent(
                UserData(
                    chat_id=chat_id,
                    field="is_uterine_malformations",
                    value=True if self._data == "–¥–∞" else False,
                )
            )
        )

        return self._next_handler

    async def process_response(self, data: str):
        self._data = data
        self._commit.set()


class SubstanceAbuseHandler(AbstractRequestButtonHandler):
    async def handle(self, chat_id: int):
        markup = InlineKeyboardMarkup()
        markup.row_width = 2
        markup.add(
            InlineKeyboardButton("–î–∞", callback_data="–¥–∞"),
            InlineKeyboardButton("–ù–µ—Ç", callback_data="–Ω–µ—Ç"),
        )

        sent_message = await self._bot.send_message(
            chat_id,
            "–£–ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç–µ/—É–ø–æ—Ç—Ä–µ–±–ª—è–ª–∏ –ª–∏ –≤—ã –Ω–∞—Ä–∫–æ—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞?",
            reply_markup=markup,
        )

        await self._commit.wait()

        await self._bot.edit_message_text(
            text=f"–ù–∞ –≤–æ–ø—Ä–æ—Å –æ–± —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏ –Ω–∞—Ä–∫–æ—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ä–µ–¥—Å—Ç–≤ –≤—ã –æ—Ç–≤–µ—Ç–∏–ª–∏: {self._data}",
            chat_id=chat_id,
            message_id=sent_message.message_id,
        )

        self._event_bus.publish(
            UpdateUserFormEvent(
                UserData(
                    chat_id=chat_id,
                    field="is_substance_abuse",
                    value=True if self._data == "–¥–∞" else False,
                )
            )
        )

        return self._next_handler

    async def process_response(self, data: str):
        self._data = data
        self._commit.set()


class TobaccoConsumptionHandler(AbstractRequestButtonHandler):
    async def handle(self, chat_id: int):
        markup = InlineKeyboardMarkup()
        markup.row_width = 2
        markup.add(
            InlineKeyboardButton("–î–∞", callback_data="–¥–∞"),
            InlineKeyboardButton("–ù–µ—Ç", callback_data="–Ω–µ—Ç"),
        )

        sent_message = await self._bot.send_message(
            chat_id,
            "–£–ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç–µ/—É–ø–æ—Ç—Ä–µ–±–ª—è–ª–∏ —Ç–∞–±–∞–∫?",
            reply_markup=markup,
        )

        await self._commit.wait()

        await self._bot.edit_message_text(
            text=f"–ù–∞ –≤–æ–ø—Ä–æ—Å –æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏ —Ç–∞–±–∞–∫–∞ –≤—ã –æ—Ç–≤–µ—Ç–∏–ª–∏: {self._data}",
            chat_id=chat_id,
            message_id=sent_message.message_id,
        )

        self._event_bus.publish(
            UpdateUserFormEvent(
                UserData(
                    chat_id=chat_id,
                    field="is_tobacco_consumption",
                    value=True if self._data == "–¥–∞" else False,
                )
            )
        )

        return self._next_handler

    async def process_response(self, data: str):
        self._data = data
        self._commit.set()

class AlcoholConsumptionHandler(AbstractRequestButtonHandler):
    async def handle(self, chat_id: int):
        markup = InlineKeyboardMarkup()
        markup.row_width = 2
        markup.add(
            InlineKeyboardButton("–î–∞", callback_data="–¥–∞"),
            InlineKeyboardButton("–ù–µ—Ç", callback_data="–Ω–µ—Ç"),
        )

        sent_message = await self._bot.send_message(
            chat_id,
            "–ó–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç–µ –ª–∏ –≤—ã –∞–ª–∫–æ–≥–æ–ª–µ–º?",
            reply_markup=markup,
        )

        await self._commit.wait()

        await self._bot.edit_message_text(
            text=f"–ù–∞ –≤–æ–ø—Ä–æ—Å –æ –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏ –∞–ª–∫–æ–≥–æ–ª–µ–º –≤—ã –æ—Ç–≤–µ—Ç–∏–ª–∏: {self._data}",
            chat_id=chat_id,
            message_id=sent_message.message_id,
        )

        self._event_bus.publish(
            UpdateUserFormEvent(
                UserData(
                    chat_id=chat_id,
                    field="is_alcohol_consumption",
                    value=True if self._data == "–¥–∞" else False,
                )
            )
        )

        return self._next_handler

    async def process_response(self, data: str):
        self._data = data
        self._commit.set()


class PreTextQuestionsHandler(AbstractInfoHandler):
    async def handle(self, chat_id: int):
        await self._bot.send_message(chat_id, """* –î–∞–ª–µ–µ –ø–æ—Å–ª–µ–¥—É—é—Ç –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ. –ü–∏—à–∏—Ç–µ –≤—Å—ë, —á—Ç–æ —Å—á–∏—Ç–∞–µ—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º.  
        
–ï—Å–ª–∏ –≤–∞–º –Ω–µ—á–µ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ—Å—Ç–∞–≤—å—Ç–µ –ø—Ä–æ—á–µ—Ä–∫.
        *""", parse_mode='Markdown')

        return self._next_handler

class InfectiousAndParasiticHandler(AbstractRequestTextHandler):
    async def handle(self, chat_id: int):
        await self._bot.send_message(
            chat_id,
            "–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –∏–Ω—Ñ–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ –∏ –ø–∞—Ä–∞–∑–∏—Ç–∞—Ä–Ω—ã–µ –±–æ–ª–µ–∑–Ω–∏: ",
        )

        await self._commit.wait()

        self._event_bus.publish(
            UpdateUserFormEvent(
                UserData(chat_id=chat_id, field="infectious_and_parasitic", value=self._data)
            )
        )

        return self._next_handler

    async def process_response(self, data: str):
        self._data = data
        self._commit.set()


class BloodAndImmuneSystemHandler(AbstractRequestTextHandler):
    async def handle(self, chat_id: int):
        await self._bot.send_message(
            chat_id,
            "–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –±–æ–ª–µ–∑–Ω–∏ –∫—Ä–æ–≤–∏, –∫—Ä–æ–≤–µ—Ç–≤–æ—Ä–Ω—ã—Ö –æ—Ä–≥–∞–Ω–æ–≤ –∏ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è, –≤–æ–≤–ª–µ–∫–∞—é—â–∏–µ –∏–º–º—É–Ω–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º: ",
        )

        await self._commit.wait()

        self._event_bus.publish(
            UpdateUserFormEvent(
                UserData(chat_id=chat_id, field="blood_and_immune_system", value=self._data)
            )
        )

        return self._next_handler

    async def process_response(self, data: str):
        self._data = data
        self._commit.set()



class EndocrineSystemHandler(AbstractRequestTextHandler):
    async def handle(self, chat_id: int):
        await self._bot.send_message(
            chat_id,
            "–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –±–æ–ª–µ–∑–Ω–∏ —ç–Ω–¥–æ–∫—Ä–∏–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã, —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–∏—Ç–∞–Ω–∏—è –∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è –æ–±–º–µ–Ω–∞ –≤–µ—â–µ—Å—Ç–≤: ",
        )

        await self._commit.wait()

        self._event_bus.publish(
            UpdateUserFormEvent(
                UserData(chat_id=chat_id, field="endocrine_system", value=self._data)
            )
        )

        return self._next_handler
    async def process_response(self, data: str):
        self._data = data
        self._commit.set()


class NervousSystemHandler(AbstractRequestTextHandler):
    async def handle(self, chat_id: int):
        await self._bot.send_message(
            chat_id,
            "–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –±–æ–ª–µ–∑–Ω–∏ –Ω–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: ",
        )

        await self._commit.wait()

        self._event_bus.publish(
            UpdateUserFormEvent(
                UserData(chat_id=chat_id, field="nervous_system", value=self._data)
            )
        )

        return self._next_handler
    async def process_response(self, data: str):
        self._data = data
        self._commit.set()

class CirculatorySystemHandler(AbstractRequestTextHandler):
    async def handle(self, chat_id: int):
        await self._bot.send_message(
            chat_id,
            "–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –±–æ–ª–µ–∑–Ω–∏ —Å–∏—Å—Ç–µ–º—ã –∫—Ä–æ–≤–æ–æ–±—Ä–∞—â–µ–Ω–∏—è: ",
        )

        await self._commit.wait()

        self._event_bus.publish(
            UpdateUserFormEvent(
                UserData(chat_id=chat_id, field="circulatory_system", value=self._data)
            )
        )

        return self._next_handler
    async def process_response(self, data: str):
        self._data = data
        self._commit.set()

class RespiratorySystemHandler(AbstractRequestTextHandler):
    async def handle(self, chat_id: int):
        await self._bot.send_message(
            chat_id,
            "–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –±–æ–ª–µ–∑–Ω–∏ –æ—Ä–≥–∞–Ω–æ–≤ –¥—ã—Ö–∞–Ω–∏—è: ",
        )

        await self._commit.wait()

        self._event_bus.publish(
            UpdateUserFormEvent(
                UserData(chat_id=chat_id, field="respiratory_system", value=self._data)
            )
        )

        return self._next_handler

    async def process_response(self, data: str):
        self._data = data
        self._commit.set()


class DigestiveSystemHandler(AbstractRequestTextHandler):
    async def handle(self, chat_id: int):
        await self._bot.send_message(
            chat_id,
            "–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –±–æ–ª–µ–∑–Ω–∏ –æ—Ä–≥–∞–Ω–æ–≤ –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏—è: ",
        )

        await self._commit.wait()

        self._event_bus.publish(
            UpdateUserFormEvent(
                UserData(chat_id=chat_id, field="digestive_system", value=self._data)
            )
        )

        return self._next_handler

    async def process_response(self, data: str):
        self._data = data
        self._commit.set()

class MusculoskeletalSystemHandler(AbstractRequestTextHandler):
    async def handle(self, chat_id: int):
        await self._bot.send_message(
            chat_id,
            "–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –±–æ–ª–µ–∑–Ω–∏ –∫–æ—Å—Ç–Ω–æ-–º—ã—à–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∏ —Å–æ–µ–¥–∏–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ç–∫–∞–Ω–∏: ",
        )

        await self._commit.wait()

        self._event_bus.publish(
            UpdateUserFormEvent(
                UserData(chat_id=chat_id, field="musculoskeletal_system", value=self._data)
            )
        )

        return self._next_handler

    async def process_response(self, data: str):
        self._data = data
        self._commit.set()


class GenitourinarySystemHandler(AbstractRequestTextHandler):
    async def handle(self, chat_id: int):
        await self._bot.send_message(
            chat_id,
            "–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –±–æ–ª–µ–∑–Ω–∏ –º–æ—á–µ–ø–æ–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã: ",
        )

        await self._commit.wait()

        self._event_bus.publish(
            UpdateUserFormEvent(
                UserData(chat_id=chat_id, field="genitourinary_system", value=self._data)
            )
        )

        return self._next_handler

    async def process_response(self, data: str):
        self._data = data
        self._commit.set()


class CongenitalAnomaliesHandler(AbstractRequestTextHandler):
    async def handle(self, chat_id: int):
        await self._bot.send_message(
            chat_id,
            "–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –≤—Ä–æ–∂–¥–µ–Ω–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏, –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —Ö—Ä–æ–º–æ—Å–æ–º–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è: ",
        )

        await self._commit.wait()

        self._event_bus.publish(
            UpdateUserFormEvent(
                UserData(chat_id=chat_id, field="congenital_anomalies", value=self._data)
            )
        )

        return self._next_handler

    async def process_response(self, data: str):
        self._data = data
        self._commit.set()


class ExternalCausesHandler(AbstractRequestTextHandler):
    async def handle(self, chat_id: int):
        await self._bot.send_message(
            chat_id,
            "–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ —Ç—Ä–∞–≤–º—ã, –æ—Ç—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥—Ä—É–≥–∏–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è –≤–Ω–µ—à–Ω–∏—Ö –ø—Ä–∏—á–∏–Ω: ",
        )

        await self._commit.wait()

        self._event_bus.publish(
            UpdateUserFormEvent(
                UserData(chat_id=chat_id, field="external_causes", value=self._data)
            )
        )

        return self._next_handler

    async def process_response(self, data: str):
        self._data = data
        self._commit.set()


class EndCommentHandler(AbstractRequestTextHandler):
    async def handle(self, chat_id: int):
        await self._bot.send_message(
            chat_id,
            "–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∑–∞–¥–∞–π—Ç–µ –∏—Ö:",
        )

        await self._commit.wait()

        self._event_bus.publish(
            UpdateUserFormEvent(
                UserData(chat_id=chat_id, field="comment", value=self._data)
            )
        )

        return self._next_handler

    async def process_response(self, data: str):
        self._data = data
        self._commit.set()

class EndFormActionHandler(AbstractRequestButtonHandler):
    async def handle(self, chat_id: int):
        markup = InlineKeyboardMarkup()
        markup.row_width = 1
        markup.add(
            InlineKeyboardButton("–ù–∞—á–∞—Ç—å üöÄ", callback_data="–Ω–∞—á–∞—Ç—å"),
        )

        await self._bot.send_message(chat_id, """
–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. üåü –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Ä–∞—á—É –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.

–ú—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–∞—Å –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ –≤–∞—à–µ–≥–æ –ø—É—Ç–∏ –∫ –∑–¥–æ—Ä–æ–≤–æ–π –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏. –í —Å–ª—É—á–∞–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –≤–∞—à–µ–º—É –≤—Ä–∞—á—É –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.

–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å" """, parse_mode='Markdown', reply_markup=markup)

        self._event_bus.publish(SaveUserFormEvent(chat_id))

        await self._commit.wait()

        self._event_bus.publish(
            ReinitializeHandlersEvent(
                HandlerData(
                    current_handler=self, current_view_data=None, chat_id=chat_id
                )
            )
        )

        return self._next_handler

    async def process_response(self, data: str):
        self._data = data
        self._commit.set()